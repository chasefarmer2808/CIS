Homework 1 Part 3 Protocol Description:

Python version: Python 2

The DHEncryptedIM.py program demonstrates shared key generation and transportation
through the Diffie-Helman method.

When the server starts, it waits for a connection from a client.  When a connection
is accepted, the server initiates a DH exchange between it and the client.  First,
the server generates its secret number by using Pycrypto's randint method.  This
number is used to compute a different number that can be shared with the client.
The server casts this number to a string and then sends it to the client.  The
client waits for it, and when it is received, the client computes its own shared
number using its secret number, and sends it to the server.  Now, the client and
the server both use these shared numbers, and their secret numbers, to compute a
shared secret number, s.

The client and server are free to exchange messages at this point.  Messages are
encrypted in AES 128 in CBC mode, with a prime key that is generated by taking
the first 20 bytes SHA1 hash of s.  IVs are generated using the os.rand function.
IVs are used for message encryption, and also concatinated to the front of the
message so it can be decrypted.  Similar to homework 1 part 2, messages are padded
to ensure they fall on a 16 byte boundary.  This is due to the fact that AES uses
16 byte block sizes.

When messages are received, they are unpacked to extract the IV and ciphertext.
The ciphertext is decrypted using the IV and shared secret prime key.  Finally,
the message is unpadded to reveal the plaintext.  
